import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from storage import get_user, save_user, use_promocode
import config

logger = logging.getLogger(__name__)

async def shop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /shop command - show the shop."""
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    # Show shop categories
    keyboard = [
        [InlineKeyboardButton("üî¥ –ü–æ–∫–µ–±–æ–ª—ã", callback_data="shop_category_pokeballs")],
        [InlineKeyboardButton("üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã", callback_data="shop_category_trainers")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üõí *–ú–∞–≥–∞–∑–∏–Ω –ü–æ–∫–µ–º–æ–Ω–æ–≤*\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def shop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle shop-related callback queries."""
    query = update.callback_query
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    try:
        # Extract the action from the callback data
        parts = query.data.split("_")
        action = parts[1]
        
        await query.answer()
        
        if action == "category":
            # Show items in a category
            category = parts[2]
            await show_shop_category(query, context, user, category)
            
        elif action == "buy":
            # Buy an item
            category = parts[2]
            item_id = parts[3]
            
            if category == "pokeballs":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback_data –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–µ–±–æ–ª–æ–≤
                if len(parts) > 4:
                    quantity = int(parts[4])
                    await buy_pokeball(query, context, user, item_id, quantity)
                else:
                    await buy_pokeball(query, context, user, item_id, 1)
            elif category == "trainers":
                await buy_trainer(query, context, user, item_id)
            
        elif action == "back":
            # Go back to the main shop menu
            await shop_callback_reset(query, user)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –≤—ã–∑–æ–≤–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def shop_callback_reset(query, user):
    """Reset to the main shop menu."""
    # Show shop categories
    keyboard = [
        [InlineKeyboardButton("üî¥ –ü–æ–∫–µ–±–æ–ª—ã", callback_data="shop_category_pokeballs")],
        [InlineKeyboardButton("üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã", callback_data="shop_category_trainers")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üõí *–ú–∞–≥–∞–∑–∏–Ω –ü–æ–∫–µ–º–æ–Ω–æ–≤*\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_shop_category(query, context, user, category):
    """Show items in a shop category."""
    if category == "pokeballs":
        # Show Pokeballs
        message = f"üî¥ *–ü–æ–∫–µ–±–æ–ª—ã*\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n\n"
        
        for ball_id, ball_data in config.POKEBALLS.items():
            message += f"{ball_data['name']}: {ball_data['cost']} –º–æ–Ω–µ—Ç\n"
            message += f"–ë–æ–Ω—É—Å –∫ —à–∞–Ω—Å—É –ø–æ–∏–º–∫–∏: +{int(ball_data['catch_rate_bonus'] * 100)}%\n\n"
        
        keyboard = []
        for ball_id, ball_data in config.POKEBALLS.items():
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            row = [
                InlineKeyboardButton(
                    f"1√ó {ball_data['name']}",
                    callback_data=f"shop_buy_pokeballs_{ball_id}_1"
                ),
                InlineKeyboardButton(
                    f"5√ó {ball_data['name']}",
                    callback_data=f"shop_buy_pokeballs_{ball_id}_5"
                )
            ]
            keyboard.append(row)
            
            row2 = [
                InlineKeyboardButton(
                    f"10√ó {ball_data['name']}",
                    callback_data=f"shop_buy_pokeballs_{ball_id}_10"
                ),
                InlineKeyboardButton(
                    f"25√ó {ball_data['name']}",
                    callback_data=f"shop_buy_pokeballs_{ball_id}_25"
                )
            ]
            keyboard.append(row2)
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    elif category == "trainers":
        # Show Trainers
        message = f"üë®‚Äçüè´ *–¢—Ä–µ–Ω–µ—Ä—ã*\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n\n"
        
        for trainer_id, trainer_data in config.TRAINERS.items():
            # Skip SARNER if requirements are not met
            if trainer_id == "sarner":
                league_req = trainer_data.get("requirements", {}).get("league", 0)
                pokemon_req = trainer_data.get("requirements", {}).get("pokemon", [])
                
                if user.league < league_req:
                    continue
                
                # Check if user has all required Pokemon
                has_all_pokemon = True
                for pokemon_name in pokemon_req:
                    if not any(p.name.lower() == pokemon_name.lower() for p in user.pokemons):
                        has_all_pokemon = False
                        break
                
                if not has_all_pokemon:
                    continue
            
            # Display trainer info
            message += f"{trainer_data['name']}: {trainer_data['cost']} –º–æ–Ω–µ—Ç\n"
            message += f"–ë–æ–Ω—É—Å —Å–∏–ª—ã: +{int(trainer_data.get('power_bonus', 0) * 100)}%\n"
            
            if "attack_bonus" in trainer_data:
                message += f"–ë–æ–Ω—É—Å –∞—Ç–∞–∫–∏: +{int(trainer_data['attack_bonus'] * 100)}%\n"
            
            if "health_bonus" in trainer_data:
                message += f"–ë–æ–Ω—É—Å –∑–¥–æ—Ä–æ–≤—å—è: +{int(trainer_data['health_bonus'] * 100)}%\n"
            
            if "coin_reward" in trainer_data:
                message += f"–ù–∞–≥—Ä–∞–¥–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö: {trainer_data['coin_reward']}\n"
            
            if "requirements" in trainer_data:
                req = trainer_data["requirements"]
                if "league" in req:
                    message += f"–¢—Ä–µ–±—É–µ–º–∞—è –ª–∏–≥–∞: {req['league']}\n"
                if "pokemon" in req:
                    message += f"–¢—Ä–µ–±—É–µ–º—ã–µ –ü–æ–∫–µ–º–æ–Ω—ã: {', '.join(p.capitalize() for p in req['pokemon'])}\n"
            
            message += "\n"
        
        keyboard = []
        for trainer_id, trainer_data in config.TRAINERS.items():
            # Skip SARNER if requirements are not met
            if trainer_id == "sarner":
                league_req = trainer_data.get("requirements", {}).get("league", 0)
                pokemon_req = trainer_data.get("requirements", {}).get("pokemon", [])
                
                if user.league < league_req:
                    continue
                
                # Check if user has all required Pokemon
                has_all_pokemon = True
                for pokemon_name in pokemon_req:
                    if not any(p.name.lower() == pokemon_name.lower() for p in user.pokemons):
                        has_all_pokemon = False
                        break
                
                if not has_all_pokemon:
                    continue
            
            # Add button for the trainer
            keyboard.append([
                InlineKeyboardButton(
                    f"–ö—É–ø–∏—Ç—å {trainer_data['name']} ({trainer_data['cost']} –º–æ–Ω–µ—Ç)",
                    callback_data=f"shop_buy_trainers_{trainer_id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def buy_pokeball(query, context, user, ball_id, quantity=1):
    """Buy multiple Pokeballs.
    
    Args:
        query: The callback query
        context: The context
        user: The user buying the Pokeball
        ball_id: The ID of the Pokeball to buy
        quantity: The number of Pokeballs to buy (default: 1)
    """
    if ball_id not in config.POKEBALLS:
        await query.edit_message_text("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ü–æ–∫–µ–±–æ–ª.")
        return
    
    ball_data = config.POKEBALLS[ball_id]
    unit_cost = ball_data["cost"]
    total_cost = unit_cost * quantity
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç
    if user.balance < total_cost:
        await query.edit_message_text(
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {quantity}√ó {ball_data['name']}.\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} –º–æ–Ω–µ—Ç ({unit_cost} √ó {quantity})",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_pokeballs")
            ]])
        )
        return
    
    # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–µ–±–æ–ª—ã
    user.balance -= total_cost
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–µ–±–æ–ª—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.pokeballs[ball_id] = user.pokeballs.get(ball_id, 0) + quantity
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_user(user)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–º–æ–Ω–µ—Ç–∞"
    coin_form = "–º–æ–Ω–µ—Ç"
    if total_cost % 10 == 1 and total_cost % 100 != 11:
        coin_form = "–º–æ–Ω–µ—Ç—É"
    elif 2 <= total_cost % 10 <= 4 and (total_cost % 100 < 10 or total_cost % 100 >= 20):
        coin_form = "–º–æ–Ω–µ—Ç—ã"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–ø–æ–∫–µ–±–æ–ª"
    ball_form = ball_data["name"]
    
    await query.edit_message_text(
        f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {quantity}√ó {ball_data['name']} –∑–∞ {total_cost} {coin_form}!\n\n"
        f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user.pokeballs.get(ball_id, 0)} {ball_form}.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_pokeballs")
        ]])
    )

async def buy_trainer(query, context, user, trainer_id):
    """Buy a Trainer."""
    if trainer_id not in config.TRAINERS:
        await query.edit_message_text("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –¢—Ä–µ–Ω–µ—Ä.")
        return
    
    trainer_data = config.TRAINERS[trainer_id]
    cost = trainer_data["cost"]
    
    # Check if the user already has this trainer
    if user.trainer and user.trainer.lower() == trainer_id:
        # User already has this trainer, check if they can upgrade it
        if "upgrade_cost" in trainer_data:
            upgrade_cost = trainer_data["upgrade_cost"]
            if user.balance < upgrade_cost:
                await query.edit_message_text(
                    f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è {trainer_data['name']}.\n\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost} –º–æ–Ω–µ—Ç",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_trainers")
                    ]])
                )
                return
            
            # Deduct the cost and upgrade the trainer
            user.balance -= upgrade_cost
            user.trainer_level += 1
            
            # Save the user
            save_user(user)
            
            await query.edit_message_text(
                f"‚úÖ –í—ã —É–ª—É—á—à–∏–ª–∏ {trainer_data['name']} –¥–æ —É—Ä–æ–≤–Ω—è {user.trainer_level} –∑–∞ {upgrade_cost} –º–æ–Ω–µ—Ç!\n\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_trainers")
                ]])
            )
            return
        else:
            await query.edit_message_text(
                f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {trainer_data['name']} –∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –µ–≥–æ –¥–∞–ª—å—à–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_trainers")
                ]])
            )
            return
    
    if user.balance < cost:
        await query.edit_message_text(
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {trainer_data['name']}.\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –º–æ–Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_trainers")
            ]])
        )
        return
    
    # Check if user meets the requirements for special trainers
    if "requirements" in trainer_data:
        req = trainer_data["requirements"]
        if "league" in req and user.league < req["league"]:
            await query.edit_message_text(
                f"‚ùå –í–∞–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤ –õ–∏–≥–µ {req['league']} –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {trainer_data['name']}.\n\n"
                f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ª–∏–≥–∞: {user.league}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_trainers")
                ]])
            )
            return
        
        if "pokemon" in req:
            missing_pokemon = []
            for pokemon_name in req["pokemon"]:
                if not any(p.name.lower() == pokemon_name.lower() for p in user.pokemons):
                    missing_pokemon.append(pokemon_name.capitalize())
            
            if missing_pokemon:
                await query.edit_message_text(
                    f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –ü–æ–∫–µ–º–æ–Ω–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {trainer_data['name']}:\n\n"
                    f"{', '.join(missing_pokemon)}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_trainers")
                    ]])
                )
                return
    
    # Deduct the cost and add the trainer
    user.balance -= cost
    user.trainer = trainer_id
    user.trainer_level = 1
    
    # If the trainer gives a coin reward, add it
    coin_reward_message = ""
    if "coin_reward" in trainer_data:
        coin_reward = trainer_data["coin_reward"]
        user.balance += coin_reward
        coin_reward_message = f"\n\n‚ú® –ë–æ–Ω—É—Å! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {coin_reward} –º–æ–Ω–µ—Ç!"
    
    # Save the user
    save_user(user)
    
    await query.edit_message_text(
        f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {trainer_data['name']} –∑–∞ {cost} –º–æ–Ω–µ—Ç!{coin_reward_message}\n\n"
        f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_category_trainers")
        ]])
    )

async def promocode_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /promocode command - redeem a promocode."""
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    # Check if the command has arguments
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promocode –í–ê–®–ö–û–î",
            parse_mode="Markdown"
        )
        return
    
    # Get the promocode
    code = context.args[0]
    
    # Try to use the promocode
    success, reward_type, reward_description = use_promocode(user_id, code)
    
    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã
        message = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ *{code}* —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        
        if reward_type == "coins":
            message += f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward_description}.\n"
            message += f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç"
        
        elif reward_type == "pokemon":
            message += f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward_description}!"
        
        elif reward_type == "trainer":
            message += f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward_description}!"
        
        elif reward_type == "custom_pokemon":
            message += f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward_description}!"
        
        await update.message.reply_text(message, parse_mode="Markdown")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ *{code}*, –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –∏–ª–∏ –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–≥–æ.",
            parse_mode="Markdown"
        )
