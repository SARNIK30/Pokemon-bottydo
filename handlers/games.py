"""
–ú–æ–¥—É–ª—å —Å –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–Ω–µ–≥ –≤ –ü–æ–∫–µ–º–æ–Ω –±–æ—Ç–µ.
"""

import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from storage import get_user, save_user, get_all_users

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# –§–æ—Ä–º–∞—Ç: {user_id: {game_name: datetime}}
user_cooldowns = {}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
GAME_COOLDOWNS = {
    "dice": 3600,  # 1 —á–∞—Å
    "slots": 1800,  # 30 –º–∏–Ω—É—Ç
    "guess_number": 600,  # 10 –º–∏–Ω—É—Ç
    "pokemon_quiz": 1200,  # 20 –º–∏–Ω—É—Ç
    "daily": 86400,  # 24 —á–∞—Å–∞
}

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
active_guess_games = {}

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã "–ü–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"
active_quiz_games = {}


async def games_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /games - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–≥—Ä."""
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data="game_dice"),
            InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data="game_slots")
        ],
        [
            InlineKeyboardButton("üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess_number"),
            InlineKeyboardButton("‚ùì –ü–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_pokemon_quiz")
        ],
        [
            InlineKeyboardButton("üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="game_daily")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üéÆ *–ú–∏–Ω–∏-–∏–≥—Ä—ã*\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã!\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –∏–≥—Ä."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user = get_user(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∏–≥—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
    if query.data == "game_dice":
        await handle_dice_game(query, user)
    elif query.data == "game_slots":
        await handle_slots_game(query, user)
    elif query.data == "game_guess_number":
        await handle_guess_number_game(query, user)
    elif query.data == "game_pokemon_quiz":
        await handle_pokemon_quiz(query, user, context)
    elif query.data == "game_daily":
        await handle_daily_bonus(query, user)
    elif query.data.startswith("guess_"):
        _, number = query.data.split("_")
        await process_guess_number(query, user, int(number))
    elif query.data.startswith("quiz_"):
        _, answer_index = query.data.split("_")
        await process_pokemon_quiz_answer(query, user, int(answer_index))
    elif query.data == "games_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä
        await query.edit_message_text(
            f"üéÆ *–ú–∏–Ω–∏-–∏–≥—Ä—ã*\n\n"
            f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã!\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data="game_dice"),
                    InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data="game_slots")
                ],
                [
                    InlineKeyboardButton("üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess_number"),
                    InlineKeyboardButton("‚ùì –ü–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_pokemon_quiz")
                ],
                [
                    InlineKeyboardButton("üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="game_daily")
                ]
            ]),
            parse_mode="Markdown"
        )


async def handle_dice_game(query, user):
    """–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏."""
    user_id = user.user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if is_on_cooldown(user_id, "dice"):
        cooldown_remaining = get_cooldown_remaining(user_id, "dice")
        await query.edit_message_text(
            f"‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –∏–≥—Ä–∞–ª–∏ –≤ –∫–æ—Å—Ç–∏!\n"
            f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {format_time_remaining(cooldown_remaining)} –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
            ])
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6
    dice_result = random.randint(1, 6)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    winnings = dice_result * 10
    user.balance += winnings
    save_user(user)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    set_cooldown(user_id, "dice")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    dice_emoji = "üé≤"
    await query.edit_message_text(
        f"{dice_emoji} *–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏*\n\n"
        f"–í—ã –±—Ä–æ—Å–∏–ª–∏: *{dice_result}*\n"
        f"–í—ã–∏–≥—Ä—ã—à: *{winnings}* üí∞\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
        ]),
        parse_mode="Markdown"
    )


async def handle_slots_game(query, user):
    """–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã."""
    user_id = user.user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if is_on_cooldown(user_id, "slots"):
        cooldown_remaining = get_cooldown_remaining(user_id, "slots")
        await query.edit_message_text(
            f"‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –∏–≥—Ä–∞–ª–∏ –≤ —Å–ª–æ—Ç—ã!\n"
            f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {format_time_remaining(cooldown_remaining)} –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
            ])
        )
        return
    
    # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤
    symbols = ["üçá", "üçä", "üçí", "üçã", "üçâ", "üçì", "üíé"]
    weights = [20, 20, 20, 15, 15, 8, 2]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = random.choices(symbols, weights=weights, k=3)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    winnings = 0
    result_text = " | ".join(result)
    
    if result[0] == result[1] == result[2]:
        # –î–∂–µ–∫–ø–æ—Ç - –≤—Å–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if result[0] == "üíé":
            winnings = 500  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç –¥–ª—è –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤
        else:
            winnings = 100
        result_description = f"*–î–ñ–ï–ö–ü–û–¢!* –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞! +{winnings} üí∞"
    elif result[0] == result[1] or result[1] == result[2] or result[0] == result[2]:
        # –î–≤–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–∞
        if (result[0] == "üíé" and result[1] == "üíé") or (result[1] == "üíé" and result[2] == "üíé") or (result[0] == "üíé" and result[2] == "üíé"):
            winnings = 100  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –¥–≤—É—Ö –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤
        else:
            winnings = 20
        result_description = f"*–£–¥–∞—á–∞!* –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞! +{winnings} üí∞"
    elif "üíé" in result:
        # –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±—Ä–∏–ª–ª–∏–∞–Ω—Ç
        diamond_count = result.count("üíé")
        winnings = 10 * diamond_count
        result_description = f"*–ù–µ–ø–ª–æ—Ö–æ!* {diamond_count} –±—Ä–∏–ª–ª–∏–∞–Ω—Ç(–æ–≤)! +{winnings} üí∞"
    else:
        # –ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ
        winnings = 0
        result_description = "*–ù–µ –ø–æ–≤–µ–∑–ª–æ!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    user.balance += winnings
    save_user(user)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    set_cooldown(user_id, "slots")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(
        f"üé∞ *–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã*\n\n"
        f"*[ {result_text} ]*\n\n"
        f"{result_description}\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
        ]),
        parse_mode="Markdown"
    )


async def handle_guess_number_game(query, user):
    """–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'."""
    user_id = user.user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if is_on_cooldown(user_id, "guess_number"):
        cooldown_remaining = get_cooldown_remaining(user_id, "guess_number")
        await query.edit_message_text(
            f"‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –∏–≥—Ä–∞–ª–∏ –≤ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!\n"
            f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {format_time_remaining(cooldown_remaining)} –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
            ])
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10
    secret_number = random.randint(1, 10)
    active_guess_games[user_id] = secret_number
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∏—Å–ª–∞–º–∏
    keyboard = []
    row = []
    for i in range(1, 11):
        row.append(InlineKeyboardButton(str(i), callback_data=f"guess_{i}"))
        if i % 5 == 0:
            keyboard.append(row)
            row = []
    
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–≥—Ä—É
    await query.edit_message_text(
        f"üî¢ *–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ*\n\n"
        f"–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å!\n\n"
        f"–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50 –º–æ–Ω–µ—Ç.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def process_guess_number(query, user, guessed_number):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä–µ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'."""
    user_id = user.user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if user_id not in active_guess_games:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
            ])
        )
        return
    
    secret_number = active_guess_games[user_id]
    del active_guess_games[user_id]  # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ —Ö–æ–¥–∞
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if guessed_number == secret_number:
        # –ü–æ–±–µ–¥–∞
        winnings = 50
        user.balance += winnings
        result_text = f"üéâ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {secret_number}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} üí∞"
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        result_text = f"‚ùå *–ù–µ–≤–µ—Ä–Ω–æ!*\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: {secret_number}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    set_cooldown(user_id, "guess_number")
    save_user(user)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(
        f"üî¢ *–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ*\n\n"
        f"{result_text}\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
        ]),
        parse_mode="Markdown"
    )


async def handle_pokemon_quiz(query, user, context):
    """–ò–≥—Ä–∞ '–ü–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞'."""
    user_id = user.user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if is_on_cooldown(user_id, "pokemon_quiz"):
        cooldown_remaining = get_cooldown_remaining(user_id, "pokemon_quiz")
        await query.edit_message_text(
            f"‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –∏–≥—Ä–∞–ª–∏ –≤ '–ü–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É'!\n"
            f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {format_time_remaining(cooldown_remaining)} –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
            ])
        )
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    quiz_data = await generate_pokemon_quiz()
    active_quiz_games[user_id] = quiz_data
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = []
    for i, option in enumerate(quiz_data["options"]):
        keyboard.append([InlineKeyboardButton(option, callback_data=f"quiz_{i}")])
    
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å
    await query.edit_message_text(
        f"‚ùì *–ü–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞*\n\n"
        f"{quiz_data['question']}\n\n"
        f"–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 80 –º–æ–Ω–µ—Ç.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def generate_pokemon_quiz() -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    # –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
    question_types = [
        "type_question",
        "evolution_question",
        "generation_question",
        "ability_question"
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
    question_type = random.choice(question_types)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    if question_type == "type_question":
        # –í–æ–ø—Ä–æ—Å –æ —Ç–∏–ø–µ –ø–æ–∫–µ–º–æ–Ω–∞
        pokemon_types = [
            "–û–≥–Ω–µ–Ω–Ω—ã–π", "–í–æ–¥–Ω—ã–π", "–¢—Ä–∞–≤—è–Ω–æ–π", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π", 
            "–õ–µ–¥—è–Ω–æ–π", "–ë–æ–µ–≤–æ–π", "–Ø–¥–æ–≤–∏—Ç—ã–π", "–ó–µ–º–ª—è–Ω–æ–π", 
            "–õ–µ—Ç–∞—é—â–∏–π", "–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π", "–ù–∞—Å–µ–∫–æ–º—ã–π", "–ö–∞–º–µ–Ω–Ω—ã–π", 
            "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π", "–î—Ä–∞–∫–æ–Ω–∏–π", "–¢–µ–º–Ω—ã–π", "–°—Ç–∞–ª—å–Ω–æ–π", "–í–æ–ª—à–µ–±–Ω—ã–π"
        ]
        
        pokemon_list = [
            ("–ü–∏–∫–∞—á—É", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"),
            ("–ß–∞—Ä–º–∞–Ω–¥–µ—Ä", "–û–≥–Ω–µ–Ω–Ω—ã–π"),
            ("–ë—É–ª—å–±–∞–∑–∞–≤—Ä", "–¢—Ä–∞–≤—è–Ω–æ–π"),
            ("–°–∫–≤–∏—Ä—Ç–ª", "–í–æ–¥–Ω—ã–π"),
            ("–î–∂–∏–≥–ª–∏–ø–∞—Ñ—Ñ", "–í–æ–ª—à–µ–±–Ω—ã–π"),
            ("–ì–µ–Ω–≥–∞—Ä", "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π"),
            ("–î—Ä–∞–≥–æ–Ω–∞–π—Ç", "–î—Ä–∞–∫–æ–Ω–∏–π"),
            ("–ú–∞–≥–∏–∫–∞—Ä–ø", "–í–æ–¥–Ω—ã–π"),
            ("–ú—å—é—Ç—É", "–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π"),
            ("–°–Ω–æ—Ä–ª–∞–∫—Å", "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π")
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞
        pokemon, correct_type = random.choice(pokemon_list)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = [correct_type]
        while len(options) < 4:
            random_type = random.choice(pokemon_types)
            if random_type not in options:
                options.append(random_type)
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        random.shuffle(options)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        correct_answer = options.index(correct_type)
        
        return {
            "question": f"–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–∫–µ–º–æ–Ω {pokemon}?",
            "options": options,
            "correct_answer": correct_answer
        }
    
    elif question_type == "evolution_question":
        # –í–æ–ø—Ä–æ—Å –æ–± —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ–∫–µ–º–æ–Ω–∞
        evolution_pairs = [
            ("–ü–∏–∫–∞—á—É", "–†–∞–π—á—É"),
            ("–ß–∞—Ä–º–∞–Ω–¥–µ—Ä", "–ß–∞—Ä–º–µ–ª–µ–æ–Ω"),
            ("–ë—É–ª—å–±–∞–∑–∞–≤—Ä", "–ò–≤–∏–∑–∞–≤—Ä"),
            ("–°–∫–≤–∏—Ä—Ç–ª", "–í–∞—Ä—Ç–æ—Ä—Ç–ª"),
            ("–ì–∞—Å—Ç–ª–∏", "–•–æ–Ω—Ç–µ—Ä"),
            ("–ò–≤–∏", "–í–∞–ø–æ—Ä–µ–æ–Ω"),
            ("–ê–±—Ä–∞", "–ö–∞–¥–∞–±—Ä–∞"),
            ("–ú–∞–≥–∏–∫–∞—Ä–ø", "–ì–∏–∞—Ä–∞–¥–æ—Å"),
            ("–î—Ä–∞—Ç–∏–Ω–∏", "–î—Ä–∞–≥–æ–Ω—ç–π—Ä"),
            ("–ü–æ–ª–∏–≤–∞–≥", "–ü–æ–ª–∏–≤–∏—Ä–ª")
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É —ç–≤–æ–ª—é—Ü–∏–π
        base_pokemon, evolved_pokemon = random.choice(evolution_pairs)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        all_evolved = [pair[1] for pair in evolution_pairs]
        wrong_options = [evo for evo in all_evolved if evo != evolved_pokemon]
        options = [evolved_pokemon] + random.sample(wrong_options, 3)
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        random.shuffle(options)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        correct_answer = options.index(evolved_pokemon)
        
        return {
            "question": f"–í –∫–∞–∫–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç {base_pokemon}?",
            "options": options,
            "correct_answer": correct_answer
        }
    
    elif question_type == "generation_question":
        # –í–æ–ø—Ä–æ—Å –æ –ø–æ–∫–æ–ª–µ–Ω–∏–∏ –ø–æ–∫–µ–º–æ–Ω–∞
        generation_data = [
            ("–ü–∏–∫–∞—á—É", "–ü–µ—Ä–≤–æ–µ"),
            ("–ß–∏–∫–æ—Ä–∏—Ç–∞", "–í—Ç–æ—Ä–æ–µ"),
            ("–ú–∞–¥–∫–∏–ø", "–¢—Ä–µ—Ç—å–µ"),
            ("–ß–∏–º—á–∞—Ä", "–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ"),
            ("–û—à–∞–≤–æ—Ç—Ç", "–ü—è—Ç–æ–µ"),
            ("–§—Ä–æ–∫–∫–∏", "–®–µ—Å—Ç–æ–µ"),
            ("–†–æ—É–ª–µ—Ç", "–°–µ–¥—å–º–æ–µ"),
            ("–°–∫–æ—Ä–±–∞–Ω–Ω–∏", "–í–æ—Å—å–º–æ–µ")
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞
        pokemon, correct_gen = random.choice(generation_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        generations = ["–ü–µ—Ä–≤–æ–µ", "–í—Ç–æ—Ä–æ–µ", "–¢—Ä–µ—Ç—å–µ", "–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ", "–ü—è—Ç–æ–µ", "–®–µ—Å—Ç–æ–µ", "–°–µ–¥—å–º–æ–µ", "–í–æ—Å—å–º–æ–µ"]
        options = [correct_gen]
        while len(options) < 4:
            random_gen = random.choice(generations)
            if random_gen not in options:
                options.append(random_gen)
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        random.shuffle(options)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        correct_answer = options.index(correct_gen)
        
        return {
            "question": f"–ö –∫–∞–∫–æ–º—É –ø–æ–∫–æ–ª–µ–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–∫–µ–º–æ–Ω {pokemon}?",
            "options": options,
            "correct_answer": correct_answer
        }
    
    else:  # ability_question
        # –í–æ–ø—Ä–æ—Å –æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–∫–µ–º–æ–Ω–∞
        ability_data = [
            ("–ü–∏–∫–∞—á—É", "–°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"),
            ("–ß–∞—Ä–º–∞–Ω–¥–µ—Ä", "–°–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏–ª–∞"),
            ("–ë—É–ª—å–±–∞–∑–∞–≤—Ä", "–•–ª–æ—Ä–æ—Ñ–∏–ª–ª"),
            ("–°–∫–≤–∏—Ä—Ç–ª", "–®–µ–ª–∫–æ–≤—ã–π –ø–∞–Ω—Ü–∏—Ä—å"),
            ("–ì–µ–Ω–≥–∞—Ä", "–õ–µ–≤–∏—Ç–∞—Ü–∏—è"),
            ("–°–ª–æ—É–±—Ä–æ", "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–º–ø"),
            ("–ú–∞—á–∞–º–ø", "–ù–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π"),
            ("–ê–ª–∞–∫–∞–∑–∞–º", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–æ–∫—É—Å"),
            ("–ì–∏–∞—Ä–∞–¥–æ—Å", "–ó–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ"),
            ("–î—Ä–∞–≥–æ–Ω–∞–π—Ç", "–ú—É–ª—å—Ç–∏—Å–∏–ª–∞")
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞
        pokemon, correct_ability = random.choice(ability_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        all_abilities = [data[1] for data in ability_data]
        options = [correct_ability]
        wrong_options = [ability for ability in all_abilities if ability != correct_ability]
        options.extend(random.sample(wrong_options, 3))
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        random.shuffle(options)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        correct_answer = options.index(correct_ability)
        
        return {
            "question": f"–ö–∞–∫–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É –ø–æ–∫–µ–º–æ–Ω–∞ {pokemon}?",
            "options": options,
            "correct_answer": correct_answer
        }


async def process_pokemon_quiz_answer(query, user, answer_index):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä–µ '–ü–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞'."""
    user_id = user.user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if user_id not in active_quiz_games:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
            ])
        )
        return
    
    quiz_data = active_quiz_games[user_id]
    correct_answer = quiz_data["correct_answer"]
    del active_quiz_games[user_id]  # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if answer_index == correct_answer:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        winnings = 80
        user.balance += winnings
        result_text = f"üéâ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} üí∞"
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        correct_option = quiz_data["options"][correct_answer]
        result_text = f"‚ùå *–ù–µ–≤–µ—Ä–Ω–æ!*\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_cooldown(user_id, "pokemon_quiz")
    save_user(user)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(
        f"‚ùì *–ü–æ–∫–µ–º–æ–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞*\n\n"
        f"{result_text}\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
        ]),
        parse_mode="Markdown"
    )


async def handle_daily_bonus(query, user):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å."""
    user_id = user.user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if is_on_cooldown(user_id, "daily"):
        cooldown_remaining = get_cooldown_remaining(user_id, "daily")
        await query.edit_message_text(
            f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {format_time_remaining(cooldown_remaining)}.\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
            ])
        )
        return
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
    # –†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–∏–≥–∏ –∏–≥—Ä–æ–∫–∞
    league_id = getattr(user, 'league', 0) or 0
    base_bonus = 100
    league_multiplier = 1 + (league_id * 0.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 20% –∑–∞ –∫–∞–∂–¥—É—é –ª–∏–≥—É
    bonus = int(base_bonus * league_multiplier)
    
    # –®–∞–Ω—Å –Ω–∞ –¥–≤–æ–π–Ω–æ–π –±–æ–Ω—É—Å (10%)
    if random.random() < 0.1:
        bonus *= 2
        bonus_text = f"üéâ *–î–í–û–ô–ù–û–ô –ë–û–ù–£–°!* –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus} üí∞"
    else:
        bonus_text = f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus} üí∞"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    user.balance += bonus
    save_user(user)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    set_cooldown(user_id, "daily")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(
        f"üí∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*\n\n"
        f"{bonus_text}\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} üí∞\n"
        f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="games_menu")]
        ]),
        parse_mode="Markdown"
    )


def is_on_cooldown(user_id: int, game_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_cooldowns:
        return False
    
    if game_name not in user_cooldowns[user_id]:
        return False
    
    last_play_time = user_cooldowns[user_id][game_name]
    cooldown_seconds = GAME_COOLDOWNS.get(game_name, 0)
    
    return datetime.now() < last_play_time + timedelta(seconds=cooldown_seconds)


def get_cooldown_remaining(user_id: int, game_name: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
    if user_id not in user_cooldowns or game_name not in user_cooldowns[user_id]:
        return 0
    
    last_play_time = user_cooldowns[user_id][game_name]
    cooldown_seconds = GAME_COOLDOWNS.get(game_name, 0)
    cooldown_end = last_play_time + timedelta(seconds=cooldown_seconds)
    
    if datetime.now() >= cooldown_end:
        return 0
    
    return int((cooldown_end - datetime.now()).total_seconds())


def set_cooldown(user_id: int, game_name: str) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∏–≥—Ä—ã."""
    if user_id not in user_cooldowns:
        user_cooldowns[user_id] = {}
    
    user_cooldowns[user_id][game_name] = datetime.now()


def format_time_remaining(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    if hours > 0:
        return f"{hours} —á. {minutes} –º–∏–Ω."
    elif minutes > 0:
        return f"{minutes} –º–∏–Ω. {seconds} —Å–µ–∫."
    else:
        return f"{seconds} —Å–µ–∫."